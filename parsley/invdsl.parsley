# http://people.mozilla.com/~juber/public/docs/_build/html/flows.html

ws = ' '*
not_ws = :c ?(c not in (' ', '\t')) -> c
letter = :c ?('a' <= c <= 'z' or 'A' <= c <= 'Z') -> c

# Lexical Operators
NOT = '!'
AND = <letter+>:and_ ?(and_.lower() == 'and') -> AND_op
OR = <letter+>:or_ ?(or_.lower() == 'or') -> OR_op

# Directive
EQ = '=:'
d_lhs = letter | '_'
d_rhs = letterOrDigit | '_' | '.' | ',' | ':' | '-'
DRCT = <d_lhs+>:d EQ <d_rhs+>:v -> directive(d, v)

# Regular Expression
RE = '/' <(not_ws)+>:r -> regexpr(r)

# Regular text
special = '_' | '.' | '-' | ':'
text = (~OR ~AND ~NOT (letterOrDigit | special ))+
TEXT = <text+>:t -> text(t)


# DSF (Device Specific Filters)
DSF = DRCT | RE | TEXT

# An atmon
atom = DSF | parens

value = NOT ws atom:a -> NOT_op(a)
        | atom

# Parens
parens = '(' ws expr:e ws ')' -> e

# Operators Precidence
# 1) i_and
# 2) 2_and
# 3) e_or

# x AND y  <-- Explicit AND
e_and = AND:op ws value:v -> (op, v)

# x y  <-- Implicit AND
i_and = (' '+ ~OR ~AND) value:v -> (AND_op, v)

# x OR y  <-- Explicit OR
e_or = OR:op ws expr_2:v -> (op, v)


# Compile
expr = expr_2:left ws e_or*:right -> compile(left, right)
expr_2 = expr_3:left ws e_and*:right -> compile(left, right)
expr_3 = value:left i_and*:right -> compile(left, right)
